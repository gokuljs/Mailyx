generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL") // required for prisma migrate, db pull
}

model User {
    id                 String              @id @default(cuid())
    emailAddress       String              @unique
    firstName          String?
    lastName           String?
    imageUrl           String?
    Account            Account[]
    Subscription       Subscription?
    chatBotInteraction chatBotInteraction?
}

model Account {
    id             String         @id @default(cuid())
    userId         String
    emailAddress   String
    accessToken    String         @unique
    name           String
    oramaIndex     Json?
    user           User           @relation(fields: [userId], references: [id])
    nextDeltaToken String?
    threads        Thread[]
    EmailAddress   EmailAddress[]
}

model Thread {
    id              String   @id @default(cuid())
    subject         String
    lastMessageDate DateTime
    participantsIds String[]
    accountId       String?
    Account         Account? @relation(fields: [accountId], references: [id])
    done            Boolean  @default(false)
    inboxStatus     Boolean  @default(true)
    draftStatus     Boolean  @default(false)
    sentStatus      Boolean  @default(false)
    email           Email[]

    @@index([accountId])
    @@index([done])
    @@index([inboxStatus])
    @@index([draftStatus])
    @@index([sentStatus])
    @@index([lastMessageDate])
}

model Email {
    id                   String                @id @default(cuid())
    threadId             String
    thread               Thread                @relation(fields: [threadId], references: [id])
    createdTime          DateTime
    lastModifiedTime     DateTime
    sentAt               DateTime
    receivedAt           DateTime
    internetMessageId    String
    subject              String
    sysLabels            String[]
    keywords             String[]
    sysClassifications   String[]
    sensitivity          Sensitivity           @default(normal)
    meetingMessageMethod MeetingMessageMethod?
    from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
    fromId               String
    to                   EmailAddress[]        @relation("ToEmails")
    cc                   EmailAddress[]        @relation("CcEmails")
    bcc                  EmailAddress[]        @relation("BccEmails")
    replyTo              EmailAddress[]        @relation("ReplyToEmails")
    hasAttachments       Boolean
    body                 String?
    bodySnippet          String?
    attachments          EmailAttachment[]
    inReplyTo            String?
    references           String?
    threadIndex          String?
    internetHeaders      Json[]
    nativeProperties     Json?
    folderId             String?
    omitted              String[]

    emailLabel EmailLabel @default(inbox)

    @@index([threadId])
    @@index([emailLabel])
    @@index([sentAt])
}

enum EmailLabel {
    inbox
    sent
    draft
}

model EmailAddress {
    id            String  @id @default(cuid())
    name          String?
    address       String
    raw           String?
    sentEmails    Email[] @relation("FromEmail")
    receivedTo    Email[] @relation("ToEmails")
    receivedCc    Email[] @relation("CcEmails")
    receivedBcc   Email[] @relation("BccEmails")
    replyToEmails Email[] @relation("ReplyToEmails")

    accountId String
    account   Account @relation(fields: [accountId], references: [id])

    @@unique([accountId, address])
}

model EmailAttachment {
    id              String  @id @default(cuid())
    name            String
    mimeType        String
    size            Int
    inline          Boolean
    contentId       String?
    content         String?
    contentLocation String?
    Email           Email   @relation(fields: [emailId], references: [id])
    emailId         String
}

model ContactMessage {
    id        String   @id @default(cuid())
    fromEmail String   @db.VarChar(255)
    subject   String   @default("No subject") @db.VarChar(255)
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Sensitivity {
    normal
    private
    personal
    confidential
}

enum MeetingMessageMethod {
    request
    reply
    cancel
    counter
    other
}

model Subscription {
    id                   String             @id @default(cuid())
    userId               String             @unique
    user                 User               @relation(fields: [userId], references: [id])
    paddleSubscriptionId String             @unique
    customerID           String
    addressId            String
    businessId           String?
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    startedAt            DateTime
    endedAt              DateTime?
    nextBilledAt         DateTime?
    pausedAt             DateTime?
    canceledAt           DateTime?
    status               SubscriptionStatus
    billingInterval      String
    billingFrequency     Int
    planId               String
}

model chatBotInteraction {
    id     String @id @default(cuid())
    day    String
    count  Int    @default(1)
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    @@unique([day, userId])
    @@index([day, userId])
}

enum SubscriptionStatus {
    ACTIVE
    PAUSED
    CANCELLED
    EXPIRED
    PAST_DUE
}
